# -*- coding: utf-8 -*-
"""Chatbot_Online_IDE

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xk7DuSFkWqG03GH08FxPIHCt_UreWVkx
"""

!pip install google-generativeai

import google.generativeai as genai

genai.configure(api_key="<your_api_key>")

i'import json
import os
import time
import random
from collections import defaultdict
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

nltk.download('punkt_tab')

# Ensure necessary NLTK resources are downloaded
nltk.download('stopwords')
nltk.download('punkt')

def get_chat_history_file(user_name):
    return f"{user_name}_chat_history.json"

def get_chat_summary_file(user_name):
    return f"{user_name}_chat_summary.json"

def load_chat_history(user_name):
    """Load summarized chat history from a JSON file specific to the user."""
    chat_history_file = get_chat_history_file(user_name)
    if os.path.exists(chat_history_file):
        with open(chat_history_file, "r") as file:
            return json.load(file)
    return [{"user_info": {}, "chat_history": []}]  # Default structure

def load_chat_summary(user_name):
    """Load summarized chat summary from a JSON file specific to the user."""
    chat_summary_file = get_chat_summary_file(user_name)
    if os.path.exists(chat_summary_file):
        with open(chat_summary_file, "r") as file:
            return json.load(file)
    return {"conversation_time": "", "summary": ""}  # Default structure

def save_chat_history(user_name, history):
    """Save summarized chat history to a JSON file specific to the user."""
    chat_history_file = get_chat_history_file(user_name)
    with open(chat_history_file, "w") as file:
        json.dump(history, file, indent=4)

def save_chat_summary(user_name, summary):
    """Save the conversation summary to a new JSON file, appending the summary or updating if needed."""
    chat_summary_file = get_chat_summary_file(user_name)

    # Load the existing summaries if the file exists
    if os.path.exists(chat_summary_file):
        with open(chat_summary_file, "r") as file:
            existing_summaries = json.load(file)
    else:
        existing_summaries = []

    # Append the new summary to the list
    existing_summaries.append(summary)

    # Save the updated summaries list back to the file
    with open(chat_summary_file, "w") as file:
        json.dump(existing_summaries, file, indent=4)

def remove_stopwords(text):
    """Removes stop words from user input before storing it."""
    stop_words = set(stopwords.words("english"))
    words = word_tokenize(text)
    filtered_text = [word for word in words if word.lower() not in stop_words]
    return " ".join(filtered_text)

def update_chat_history(summary, user_input, bot_response, emotion):
    """Update the chat history with the conversation"""

    # Ensure summary is a dictionary
    if not isinstance(summary, dict):
        summary = {"user_info": {}, "chat_history": []}

    chat_history = summary.get("chat_history", [])  # Ensure chat_history is a list

    chat_history.append({
        "user_input": user_input,
        "bot_response": bot_response,
        "emotion": emotion
    })

    # Update summary with the modified chat history
    summary["chat_history"] = chat_history

    return summary

def generate_conversation_summary(user_name):
    """Generate a summary of the conversation, remove stopwords, and save the summary."""
    chat_history = load_chat_history(user_name)

    # Time of conversation
    conversation_time = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())

    model = genai.GenerativeModel("gemini-2.0-flash-lite")

    # Generate AI summary based on chat history
    response = model.generate_content(f"""You are an AI that summarizes conversations for a mental health chatbot.
    Here is the chat history:
    {chat_history}

    Please summarize the conversation, including key moments, and emotions.
    Provide the summary in a concise format and include the time the conversation ended: {conversation_time}.
    The summary should help the chatbot in future conversations to understand the user better.""")

    conversation_summary = response.text.strip()

    # Clean stopwords from the summary
    cleaned_summary = remove_stopwords(conversation_summary)

    # Structure to store summary and time
    summary_data = {
        "conversation_time": conversation_time,
        "summary": cleaned_summary
    }

    # Save the generated summary
    save_chat_summary(user_name, summary_data)

    # Delete the chat history file after saving the summary
    chat_history_file = get_chat_history_file(user_name)
    if os.path.exists(chat_history_file):
        os.remove(chat_history_file)  # This deletes the original chat history file

def clear_data(user_name):
  print(f"ðŸ¤– Chatbot: What data would you like to clear from the memeory ?")
  user_input = input("ðŸ‘¤ You: ")
  chat_summary = load_chat_summary(user_name)
  chat_history = load_chat_history(user_name)

  model = genai.GenerativeModel("gemini-2.0-flash-lite")

  response = model.generate_content(f"""You are an AI that deletes content based on the userâ€™s needs.
Here is the user's needs: {user_input}
Here is the chat summary: {chat_summary}
Consider the following scenarios :
When the user wants the entire or all the data to be deleted then just overwrite the chat summary completely blank in the same file format.
When the user wants a particular information to be deleted then look for the summary which contains the information and then overwrite that summary by deleting the information specified by the user.
For example if the chat summary contains: 'User mentioned about having a great time. User played pool, User's favourite colour is green' and if the user needs is: 'I want you to forget tht my favourite colour is green' then the chat history should be: 'User mentioned about having a great time. User played pool'.
Note: Instead of appending, rewrite the existing summary.
                                        """)
  conversation_summary = response.text.strip()
  cleaned_summary = remove_stopwords(conversation_summary)
  summary_data = {
        "conversation_time": conversation_time,
        "summary": cleaned_summary
    }
  save_chat_summary(user_name, summary_data)

  response = model.generate_content(f"""You are an AI that deletes content based on the userâ€™s needs.
Here is the user's needs: {user_input}
Here is the chat history (current chat): {chat_history}
Consider the following scenarios :
When the user wants the entire or all the data to be deleted then just make the chat history completely blank in the same file format.
When the user wants a particular information to be deleted hen search for the history key which contains the information and then overwrite that history without the information.
For example if the chat hisory contains: 'Today was great. I played pool. My favourite colour is green' and if the user needs is: 'I want you to forget that my favourite colour is green' then the chat history should be: 'Today was great. I played pool.'
Note: Instead of appending, rewrite the existing history.
                                        """)
  history = response.text.strip()
  save_chat_history(user_name, history)
  print(f"ðŸ¤– Chatbot: Data cleared successfully")

def mental_health_chatbot(user_name, user_input, emotion):
    """Generates a response while maintaining summarized chat history."""
    chat_history = load_chat_history(user_name)

    chat_summary = load_chat_summary(user_name)

    model = genai.GenerativeModel("gemini-2.0-flash-lite")

    # Generate AI response
    response = model.generate_content(f"""You are an empathetic mental health assistant.
    Remember the user's past conversations and provide meaningful responses.
    You have access to the following conversation history:
    Current Chat History: {chat_history}
    Previous Chat Summaries: {chat_summary}
    Where the current chat history is the conversation who are having right now and the previous chat history contains the summary of the chat you have had with that user previoulsy.
    Always provide supportive, uplifting, and kind responses based on the user input and their emotion which is given as input to you as seen on camera. If the any negative emotion is same for too long then try to tell quotes or suggest videos or music, or make a joke or play games to uplift the mood. If the person's emotion is happy or neutral for some time continuously, then ask questions to the person so you can learn more about them. You can use the JSON file to have conversation with the user (for example, if some happy moment is mentioned in the JSON file, then you can use that to talk if the person emotion is sad or remind the person about how they overcame a previous sad or negative situation). Refer the following text for more understanding:
    How the model should work:
    The model should understand the emotion of the user and reply to them in a way that makes them feel comfortable. The model can use the JSON file as reference to understand the user and give customised responses. For example, if the user is worried about some failure, is experiencing anxiety, and if the JSON file contains information from a previous chat that mentions how the user overcame his fear and achieved something, then the model can use it as a reference and mention that to inspire the user.
    Important Note: The model should remember the previous chat history to give proper replies.

    Refer to the following scenarios:
    The mood of the user is sad, if the mood of the user is sad for more than 4-8 replies then either get any one good memory from the good memory tag from the JSON file and tell it to the user and mention that things will get better or take any bad memory from the bad memory tag and tell how theyâ€™ve overcome that (if they did) and that they can overcome this also.
    If the mood is anxious then take any bad memory from the bad memory tag and tell how theyâ€™ve overcome that (if they did) and that they can overcome this also and that this is just a part of the process of something nice.

    Additional features to be used:
    The model can give a quote or ask if the user wants suggestions for videos, music, joke or games to uplift their mood if the personâ€™s mood doesnâ€™t get better even after 4-8 replies.
    The model can interact with fun text-based games to make the user engaging and happy.
    The model can tell jokes to make the user happy.
    The model can try to use sarcasm without hurting the feelings of the user.

    Rules:
    The model shouldnâ€™t use offensive language.
    The model shouldnâ€™t help in planning the user to sabotage any individual, organisation or self.
    The model shouldnâ€™t prescribe any medication at any cost.
    Model should help the user seek medical/psychological assistance in case the user expresses suicidal/harmful actions.

    Output:
    For each reply from the user, the model should give the reply accordingly until the chat is completely ended with something similar to a bye.
    Always act like you are talking to the user like a person.
    Important Note: Donâ€™t ask multiple questions in the same response, limit to maximum 2-3 and wait for the userâ€™s response (preferably 1 question).
    Important: If the user specifies that they want to delete their data or some information that they hve mentioned to the chatbot before then return 'CLEAR' as the output, in this case you shouldn't return anything else.
    Important: If the user asks you forget something that they have mentioned earlier then return 'CLEAR' as the output, in this case you shouldn't return anything else.

    New input from user:
    User: {user_input} (Emotion: {emotion})

    AI:""")

    bot_response = response.text.strip()

    # Update chat summary with both user input and AI response
    chat_history = update_chat_history(chat_history, user_input, bot_response, emotion)

    # Save updated summary
    save_chat_history(user_name, chat_history)

    return bot_response

# Main loop
Latest_emotions = ["neutral", "neutral"]  # the latest emotions experienced by the user
n = 0

print("ðŸ¤– Chatbot: Hi! Iâ€™m here to listen. Please enter your name.")
user_name = input("ðŸ‘¤ Enter your name: ")
print("ðŸ¤– Chatbot: How are you feeling today?")

while True:
    user_input = input("ðŸ‘¤ You: ")
    emotion = input("Emotion: ")

    if (n == 0):
        Latest_emotions[n] = emotion
        n = 1
    else:
        Latest_emotions[n] = emotion
        n = 0

    if user_input.lower() in ["exit", "quit", "bye", "bubye", "talk to you later", "sayonara", " c u","cu", "see you", "ttyl", "okay bye", "cya", "see you later", "goodbye", "I am leaving", "I'm leaving"]:
        if (Latest_emotions.count("sad") == 2 or Latest_emotions.count("fear") == 2 or Latest_emotions.count("anger") == 2):
            print("ðŸ¤– Chatbot: Hope you are doing alright. If there's anything, I'm always here for you. Don't stress yourself. Things will get better\nTake care! Remember, you are not alone. ðŸ’™")
        else:
            print("ðŸ¤– Chatbot: Take care! Remember, you are not alone. ðŸ’™")

        # Generate the conversation summary and save it when conversation ends
        generate_conversation_summary(user_name)

        break

    response = mental_health_chatbot(user_name, user_input, emotion)
    if (response == 'CLEAR'):
      clear_data(user_name)
    else:
      print(f"ðŸ¤– Chatbot: {response}")
